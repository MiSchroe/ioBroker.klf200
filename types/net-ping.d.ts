/** Declaration file generated by dts-gen */

declare module "net-ping" {
	import EventEmitter from "events";

	/*
	 * Errors
	 */
	export class DestinationUnreachableError extends Error {
		constructor(readonly source: any) {}
		name: "DestinationUnreachableError";
	}

	export class PacketTooBigError extends Error {
		constructor(readonly source: any) {}
		name: "PacketTooBigError";
	}

	export class ParameterProblemError extends Error {
		constructor(readonly source: any) {}
		name: "ParameterProblemError";
	}

	export class RedirectReceivedError extends Error {
		constructor(readonly source: any) {}
		name: "RedirectReceivedError";
	}

	export class RequestTimedOutError extends Error {
		constructor(readonly source: any) {}
		name: "RequestTimedOutError";
	}

	export class SourceQuenchError extends Error {
		constructor(readonly source: any) {}
		name: "SourceQuenchError";
	}

	export class TimeExceededError extends Error {
		constructor(readonly source: any) {}
		name: "TimeExceededError";
	}

	export enum NetworkProtocol {
		IPv4 = 1,
		IPv6 = 2,
	}

	export type SessionOptions = {
		networkProtocol?: NetworkProtocol;
		packetSize?: number;
		retries?: number;
		sessionId?: number;
		timeout?: number;
		ttl?: number;
	};

	export type pingHostCallbackType = (
		error: Error | null | undefined,
		target: string,
		sent: Date,
		rcvd: Date,
	) => void;

	export type ttlOrOptionsOptionsType = {
		ttl?: number;
		maxHopTimeouts?: number;
		startTtl?: number;
	};

	export type ttlOrOptionsType = ttlOrOptionsOptionsType | number;

	export type feedCallbackType = (
		error: Error | null | undefined,
		target: string,
		ttl: number,
		sent: Date,
		rcvd: Date,
	) => void;

	export type doneCallbackType = (error: Error | null | undefined, target: string) => void;

	export type requestType = {
		id?: number;
		retries?: number;
		timeout?: number;
		callback?: doneCallbackType;
		target?: string;
		ttl?: number;
		sent?: Date;
		buffer?: Buffer;
		type?: number;
		code?: number;
	};

	export class Session extends EventEmitter {
		constructor(options?: SessionOptions);
		close(): void;
		pingHost(target: string, callback: pingHostCallbackType): Session;
		traceRoute(
			target: string,
			ttlOrOptions: ttlOrOptionsType,
			feedCallback: feedCallbackType,
			doneCallback: doneCallbackType,
		): void;
		flush(error: Error | null | undefined): void;
		getSocket(): any;

		fromBuffer(buffer: Buffer): requestType;

		onBeforeSocketSend(req: requestType): void;

		onSocketClose(): void;

		onSocketError(error: any): void;

		onSocketMessage(buffer: Buffer, source: string): void;

		onSocketSend(req: requestType, error: Error | null | undefined, bytes: any): void;

		onTimeout(req: requestType): void;

		reqQueue(req: requestType): Session;

		reqRemove(id: number): requestType;

		send(req: requestType): void;

		setTTL(ttl: number): void;

		toBuffer(req: requestType): Buffer;

		// traceRouteCallback(trace: any, req: requestType, error: Error, target: string, sent: Date, rcvd: Date): void;

		on(event: "close", listener: () => void): this;
		on(event: "error", listener: (error: Error) => void): this;
	}

	export function createSession(options?: SessionOptions): Session;
}
